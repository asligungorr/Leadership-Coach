# app.py
import streamlit as st
import os
import sys
from chatbot import WeaviateGeminiChatbot  # Ana kodunuzdan chatbot sÄ±nÄ±fÄ±nÄ± import edin

# Streamlit Uygulama ArayÃ¼zÃ¼
def main():
    st.set_page_config(
        page_title="Weaviate & Gemini Chatbot",
        page_icon="ğŸ¤–",
        layout="centered"
    )

    # Streamlit sayfa baÅŸlÄ±ÄŸÄ± ve aÃ§Ä±klamasÄ±
    st.title("ğŸ“š DokÃ¼man TabanlÄ± Chatbot")
    st.subheader("Weaviate ve Gemini API ile GeliÅŸtirilmiÅŸ Sohbet AsistanÄ±")
    
    # API anahtarlarÄ±nÄ± ve model seÃ§imini dÃ¼zenleme seÃ§eneÄŸi
    with st.sidebar:
        st.header("Ayarlar")
        gemini_api = st.text_input("Gemini API Key", value=os.environ.get("GEMINI_API_KEY", ""), type="password")
        weaviate_api = st.text_input("Weaviate API Key", value=os.environ.get("WEAVIATE_APIKEY", ""), type="password")
        model_name = st.selectbox("Model SeÃ§imi", ["gemini-1.5-pro", "gemini-1.5-flash"], index=0)
        k_docs = st.slider("Getirilen DokÃ¼man SayÄ±sÄ±", min_value=1, max_value=10, value=3)
        
        if st.button("AyarlarÄ± GÃ¼ncelle"):
            os.environ["GEMINI_API_KEY"] = gemini_api
            os.environ["WEAVIATE_APIKEY"] = weaviate_api
            st.success("Ayarlar gÃ¼ncellendi!")
    
    # Oturumu baÅŸlat
    if "chatbot" not in st.session_state:
        st.session_state.chatbot = WeaviateGeminiChatbot(
            index_name="Chatbot", 
            model="gemini-1.5-pro"
        )
    
    # Mesaj geÃ§miÅŸi
    if "messages" not in st.session_state:
        st.session_state.messages = []
    
    # Ã–nceki mesajlarÄ± gÃ¶ster
    for message in st.session_state.messages:
        with st.chat_message(message["role"]):
            st.markdown(message["content"])
    
    # KullanÄ±cÄ± girdisi
    if prompt := st.chat_input("Bir soru sorun..."):
        # KullanÄ±cÄ± mesajÄ±nÄ± ekle
        st.session_state.messages.append({"role": "user", "content": prompt})
        with st.chat_message("user"):
            st.markdown(prompt)
        
        # Asistan cevabÄ±
        with st.chat_message("assistant"):
            # Streamlit ile uyumlu olmasÄ± iÃ§in Ã¶zel konteyner oluÅŸtur
            message_placeholder = st.empty()
            
            # Stream fonksiyonunu deÄŸiÅŸtirmeden kullanmak iÃ§in
            # bir StringIO benzeri nesne oluÅŸturup kullanÄ±yoruz
            class StreamCapture:
                def __init__(self):
                    self.content = ""
                
                def write(self, text):
                    self.content += text
                    message_placeholder.markdown(self.content)
                    return len(text)
                
                def flush(self):
                    pass
            
            # Stream Ã§Ä±ktÄ±sÄ±nÄ± yakalayacak nesne
            stream_capture = StreamCapture()
            
            # Orijinal stdout'u kaydet
            original_stdout = sys.stdout
            
            try:
                # Ã‡Ä±ktÄ±yÄ± yakalama nesnesine yÃ¶nlendir
                sys.stdout = stream_capture
                
                # Chatbot'u Ã§aÄŸÄ±r (terminal Ã§Ä±ktÄ±sÄ± artÄ±k Streamlit'e gidecek)
                response = st.session_state.chatbot.chat(prompt, k=k_docs)
                
                # Yakalanan yanÄ±tÄ± son haliyle gÃ¶ster
                message_placeholder.markdown(response)
            finally:
                # Orijinal stdout'u geri yÃ¼kle
                sys.stdout = original_stdout
        
        # Asistan mesajÄ±nÄ± kaydet
        st.session_state.messages.append({"role": "assistant", "content": response})

if __name__ == "__main__":
    main()
